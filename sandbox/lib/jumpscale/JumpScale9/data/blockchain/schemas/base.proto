syntax = "proto3";

package blockchain;

//ask for a specific action
message Object {
    unint32 id = 1; //each message gets a unique guid
    unint32 domain = 2;//unique domain in which the messages live in e.g. user.system, group.system
    string data = 3; //the payload
    unint32 date =4;//for last change
    unint32 author =5 ; //unique id of the author
    string signature = 6; //signature of data done by private key of author (8 bytes)
    string signature_previous = 7; //signature of previous message data done by private key of author (8 bytes)
    
    enum Compression {
      NONE = 0;
      BLOSC = 1;
      SNAPPY = 2;
    }

    Compression compression_type = 8;
      
  }

message Decrypt {
  string userguid = 1; //can be a group too (a group has also a private key & corresponding userguid)
  //symmetrical encryption key which has been encrypted with the public key of the user 
  //encryption key was: blake_hash_256+random 4bytes (salt)
  //encryption done by means of TOBEDEFINED???
  string encrkey =2 ; 
  //if you have access to the data (means you have a record which allows you to get to the encr key)
  // then you can add/remove other users who can have access

}

//by purpose group's like this have no name/description, this needs to live on higher level layer
message Group {
  string previous = 3; // link to previous unique address (to the previous guid)  
  repeated GroupMember members = 4; //list of of members with their corresponding rights
  //only admin's can change a group
  unint32 date =6;
  string author =7 ; //guid of author is in category person & needs to be an admin of this group
  string signature = 8; //signature done by private key of admin person, 
                        //can only be admin person, should discard objects which where changed by non admin persons
                        //need to discard at check function of blockchain, to make sure it doesn't get into the blockchain

}

message GroupMember {
  string user_guid =1;
  enum Right {
    ADMIN = 0;
    READ = 1;
    WRITE = 2;
    EXECUTE = 3;
  }
}

message Domain {
  string guid = 1;
  // fullname like dns: e.g. incubaid.com
  string name = 2;
  //pubkey e.g. used to verify signature of the code, this to make sure that original authors produced the code
  repeated string pubkey = 3;     
  string description = 5;
  //identify a domain, can be linked to a company, but all of this is optional
  repeated string company = 6;
  repeated string url = 7;
  repeated string email = 8;
}

message DomainPointer {
  int32 id = 1;
  string name = 2;
}


message SecurityPolicy {
  string guid = 1;  //in category: securitypolicy



}
